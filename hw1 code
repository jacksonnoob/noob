#include <iostream>
#include <vector>
#include <sstream>
#include <fstream>
#include <string>
#include <cmath>
#include <ctype.h>
#include <algorithm>
using namespace std;

struct Node
{
  Node *parent;
  vector<string> data;
  vector<vector<int>> ids;
  vector<Node *> children;
  int value;
  Node *left;
  Node *right;
  Node()
  {
    parent = NULL;
  }

  Node(int val, int id, Node *par)
  {
    parent = par;
    value = val;
    vector<int> temp;
    temp.push_back(id);
    ids.push_back(temp);
    left = NULL;
    right = NULL;
  }

  Node(string value, int id)
  {
    parent = NULL;
    data.push_back(value);
    vector<int> temp;
    temp.push_back(id);
    ids.push_back(temp);
  }

  Node(string value, vector<int> id, Node *par)
  {
    parent = par;
    data.push_back(value);
    ids.push_back(id);
  }
};

class Tree
{
public:
  virtual void insert(string value, int id) {}
  void printLine(vector<vector<string>> originData, int index)
  {
    cout << "[" << originData[index][11] << "] " << originData[index][1] << ", " << originData[index][3] << ", " << originData[index][4] << ", " << originData[index][5] << ", " << originData[index][8] << "\n";
  }

protected:
  Node *root;
};

class TwoThreeTree : public Tree
{
private:

  void sort(Node *node)
  {
    for (int i = 0; i < node->data.size(); i++)
    {
      for (int j = i; j < node->data.size(); j++)
      {
        if (node->data[i] > node->data[j])
        {
          swap(node->data[i], node->data[j]);
          swap(node->ids[i], node->ids[j]);
        }
      }
    }
  }

  void sortChildren(Node *node)
  {
    for (int i = 0; i < node->children.size(); i++)
    {
      for (int j = i; j < node->children.size(); j++)
      {
        if (node->children[i]->data[0] > node->children[j]->data[0])
        {
          iter_swap(node->children.begin() + i, node->children.begin() + j);
        }
      }
    }
  }

  void split(Node *current)
  {

    if (current == NULL || current->data.size() <= 2)
      return;
    Node *parent = current->parent;
    Node *left = new Node(current->data[0], current->ids[0], parent);
    Node *right = new Node(current->data[2], current->ids[2], parent);
    string middleValue = current->data[1];
    vector<int> middleIds = current->ids[1];
    if (parent != NULL)
    {

      int n = parent->children.size() - 1;
      while (current != parent->children[n])
      {
        n--;
      }

      if (current->children.size() == 4 && current->data.size() == 3)
      {
        current->children[0]->parent = left;
        current->children[1]->parent = left;
        left->children.push_back(current->children[0]);
        left->children.push_back(current->children[1]);
        current->children[2]->parent = right;
        current->children[3]->parent = right;
        right->children.push_back(current->children[2]);
        right->children.push_back(current->children[3]);
      }

      parent->children.erase(parent->children.begin() + n);
      parent->data.push_back(middleValue);
      parent->ids.push_back(middleIds);
      sort(parent);
      parent->children.push_back(left);
      parent->children.push_back(right);
      sortChildren(parent);
    }

    else
    {
      parent = new Node(middleValue, middleIds, NULL);
      root = parent;
      if (current->children.size() != 0)
      {
        current->children[0]->parent = left;
        current->children[1]->parent = left;
        left->children.push_back(current->children[0]);
        left->children.push_back(current->children[1]);
        current->children[2]->parent = right;
        current->children[3]->parent = right;
        right->children.push_back(current->children[2]);
        right->children.push_back(current->children[3]);
      }
      left->parent = parent;
      right->parent = parent;
      parent->children.push_back(left);
      parent->children.push_back(right);
      sortChildren(parent);
    }
    if (parent->data.size() == 3)
      split(parent);
  }

  void insertIntoNode(Node *node, string value, int id)
  {
    for (int i = 0; i < node->data.size(); i++)
    {
      if (value == node->data[i])
      {
        node->ids[i].push_back(id);
        return;
      }
    }

    node->data.push_back(value);
    vector<int> temp;
    temp.push_back(id);
    node->ids.push_back(temp);
    sort(node);
    if (node->data.size() == 3)
    {
      split(node);
    }
  }

  Node *findInsertionNode(Node *current, string value)
  {
    if (current->children.size() == 0)
      return current;
    for (int i = 0; i < current->data.size(); i++)
    {
      if (value == current->data[i])
        return current;
    }
    if (value < current->data[0])
      return findInsertionNode(current->children[0], value);
    else if (current->data.size() == 1)
      return findInsertionNode(current->children[1], value);
    else if (value < current->data[1])
      return findInsertionNode(current->children[1], value);
    else
      return findInsertionNode(current->children[2], value);
  }

  int getHeight(Node *node)
  {
    if (node == NULL)
    {
      return 0;
    }
    int maxHeight = 0;
    for (int i = 0; i < node->children.size(); i++)
    {
      int height = getHeight(node->children[i]);
      if (height > maxHeight)
      {
        maxHeight = height;
      }
    }
    return maxHeight + 1;
  }

  void restore(Node *current)
  {
  	if(current==NULL) return;
    for (Node *a : current->children)
    {
      restore(a);
    }

    delete current;
  }

public:
  TwoThreeTree()
  {
    root = NULL;
  }

  bool isEmpty(){
  	if(root==NULL) return true;
  	return false;
  }

  void restore(vector<vector<string>> &originData)
  {
    restore(root);
    originData.clear();
    root = NULL;
  }

  int countNodes(Node *node)
  {
    if (node == NULL)
    {
      return 0;
    }
    int count = 1;
    for (int i = 0; i < node->children.size(); i++)
    {
      count += countNodes(node->children[i]);
    }
    return count;
  }
  
  bool findSchool(string schoolName,vector<vector<string> >originData){
  	return findSchool(root,schoolName,originData);
  }

  bool findSchool(Node * current, string schoolName, vector<vector<string> >originData){
    if(current==NULL) return false;
    
    if(current->data[0]<=schoolName){
      
      if(current->data[0]==schoolName){
        return true;
      }
      else if(current->children.size()!=0) return findSchool(current->children[0],schoolName,originData);
      else return false;
    }
    else if(current->data.size()==2 && current->data[1]<=schoolName){
      if(current->data[1]==schoolName){
        return true;
      }
      else if(current->children.size()>1) return findSchool(current->children[1],schoolName,originData);
      else return false;
    }
    else if(current->data.size()==2 && current->data[1]>schoolName){
      if(current->children.size()==3) return findSchool(current->children[2],schoolName,originData);
      else return false;
    }
    else{
      if(current->children.size()>1){
        return findSchool(current->children[1],schoolName,originData);
      }
      return false;
    }
  }

  void insert(string value, int id)
  {
    if (root == NULL)
    {
      root = new Node(value, id);
      return;
    }
    Node *node = findInsertionNode(root, value);
    insertIntoNode(node, value, id);
  }

  void printRoot(vector<vector<string>> &originData)
  {
    printf("Tree height = %d\n", getHeight(root));
    printf("Number of nodes = %d\n", countNodes(root));
    vector<int> first = root->ids[0];
    vector<int> second;
    if (root->ids.size() == 2)
      second = root->ids[1];
    int firstId = 0;
    int secondId = 0;
    int i = 1;
    while (firstId < first.size() || secondId < second.size())
    {
      cout << i << ": ";
      if (firstId < first.size() && secondId < second.size())
      {
        if (first[firstId] < second[secondId])
        {
          printLine(originData, first[firstId]);
          firstId++;
        }
        else
        {
          printLine(originData, second[secondId]);
          secondId++;
        }
      }
      else if (firstId < first.size() && secondId >= second.size())
      {
        printLine(originData, first[firstId]);
        firstId++;
      }
      else
      {
        printLine(originData, second[secondId]);
        secondId++;
      }
      i++;
    }
  }
};

class AVLTree : public Tree
{
public:
  AVLTree()
  {
    root = NULL;
  }
  
  void printCurrent(Node * current, int& count, vector<vector<string> > originData,int &n){
  	for(int nt : current -> ids[0]){
  		printf("%d: ", count);
        printLine(originData, nt);
        n--;
  		count++;
	  }
  }
  void getLargest(int n,vector<vector<string> > & originData){
  	int count = 1;
  	traverse(root,n,count,originData);
  }
  void traverse(Node * current,int & n,int & count,vector<vector<string> > & originData){
  	
  	if(current==NULL) return;
  	traverse(current->right,n,count,originData);
  	if(n<=0) return;
  	printCurrent(current,count,originData,n);
  	traverse(current->left,n,count,originData);
  }

  bool isEmpty(){
  	if(root==NULL) return true;
  	return false;
  }

  void insert(string value, int id)
  {
    value.erase(remove_if(value.begin(), value.end(), static_cast<int (*)(int)>(&ispunct)), value.end());
    value.erase(remove(value.begin(), value.end(), ','), value.end());
    root = insert(root, stoi(value), id, NULL);
  }

  void printRoot(vector<vector<string>> &originData)
  {
    printf("Tree height = %d\n", height(root));
    printf("Number of nodes = %d\n", numNodes(root));
    int i = 1;
    
    for (int n : root->ids[0])
    {
      printf("%d: ", i);
      printLine(originData, n);
      i++;
    }
  }

  void restore(vector<vector<string>> &originData)
  {
  	if(root==NULL) return;
    restore(root->left);
    restore(root->right);
    delete root;
    root = NULL;
    originData.clear();
  }

private:
  int numNodes(Node *cur)
  {
    if (cur == NULL)
      return 0;
    else
      return 1 + numNodes(cur->left) + numNodes(cur->right);
  }

  void restore(Node *current)
  {
    if (current == NULL)
      return;
    restore(current->left);
    current->left = NULL;
    restore(current->right);
    current->right = NULL;
    delete current;
    current = NULL;
  }

  Node *insert(Node *node, int value, int id, Node *parent)
  {
    if (node == NULL)
    {
      return new Node(value, id, parent);
    }

    if (node->value == value)
    {
      node->ids[0].push_back(id);
      return node;
    }

    if (value < node->value)
    {
      node->left = insert(node->left, value, id, node);
    }
    else
    {
      node->right = insert(node->right, value, id, node);
    }
    int balance = getBalance(node);
    int balanceRight = getBalance(node->right);
    int balanceLeft = getBalance(node->left);
    
    if (balance > 1 && balanceLeft>0)
      return rightRotate(node);
    if (balance < -1 && balanceRight<0)
      return leftRotate(node);
    if (balance > 1 && balanceLeft<0)
    {
      node->left = leftRotate(node->left);
      return rightRotate(node);
    }

    if (balance < -1 && balanceRight>0)
    {
      node->right = rightRotate(node->right);
      return leftRotate(node);
    }
	
    return node;
  }

  Node *rightRotate(Node *current)
  {
    Node *temp = current->left;
    Node *temp2 = temp->right;
    temp->right = current;
    current->left = temp2;
    return temp;
  }

  Node *leftRotate(Node *current)
  {
    Node *temp = current->right;
    Node *temp2 = temp->left;
    temp->left = current;
    current->right = temp2;
    return temp;
  }

  int getBalance(Node *N)
  {
    if (N == NULL)
      return 0;
    return height(N->left) - height(N->right);
  }

  int height(Node *current)
  {
    if (current == NULL)
      return 0;
    else
      return 1 + max(height(current->left), height(current->right));
  }
};

vector<string> split(string &str, string &b)
{
  int first, last;
  int i = 0;
  vector<string> answer;
  last = str.find(b);
  first = 0;
  while (last != string::npos)
  {
    answer.push_back(str.substr(first, last - first));
    first = last + b.size();
    last = str.find(b, first);
    i++;
  }

  if (first != str.length())
  {
    answer.push_back(str.substr(first));
  }

  return answer;
}

string addPrefix(string add, string s)
{
  stringstream ss;
  ss << add;
  ss << s;
  ss << ".txt";
  return ss.str();
}

bool readData(Tree &data, vector<vector<string>> &originData, string dataName, bool isTwoThree)
{
  if (dataName.size() == 3)
    dataName = addPrefix("input", dataName);
  ifstream ifs;
  string line;
  ifs.open(dataName);
  if (!ifs.is_open())
  {
    printf("No file\n");
    return false;
  }
  for (int i = 0; i < 3; i++)
  {
    getline(ifs, line);
  }
  vector<string> temp;
  string sp = "\t";
  int i = 0;
  while (getline(ifs, line))
  {
    temp = split(line, sp);
    temp.push_back(to_string(i + 1));

    if (isTwoThree)
      data.insert(temp[1], i);

    else
      data.insert(temp[8], i);

    originData.push_back(temp);
    i++;
  }
  ifs.close();
  return true;
}

int getInt()
{
  string s;
  getline(cin, s);
  int total = 0;
  int a;
  if (s.length() == 0)
    return -1;
  for (int i = 0; i < s.length(); i++)
  {
    total *= 10;
    a = s[i] - '0';
    if (a < 0 || a > 9)
      return -1;
    total += a;
  }
  return total;
}
int main()
{
  vector<vector<string>> data;
  cout << "*** Search Tree Utilities **" << endl;
  cout << "* 0. QUIT                  *" << endl;
  cout << "* 1. Build 2-3 tree        *" << endl;
  cout << "* 2. Build AVL tree        *" << endl;
  cout << "* 3. Intersection Query    *" << endl;
  cout << "*************************************" << endl;
  cout << "Input a choice(0, 1, 2, 3):" << endl;
  int n = getInt();
  string fileName;
  string schoolName;
  TwoThreeTree twoThreeTree;
  AVLTree avlTree;
  vector<vector<string>> originData;
  int t;
  while (n != 0)
  {
    switch (n)
    {
    case 1:
      twoThreeTree.restore(originData);
      printf("Please insert file number\n");
      getline(cin, fileName);
      if (!readData(twoThreeTree, originData, fileName, true))
        break;
      twoThreeTree.printRoot(originData);
      
      break;
    case 2:
      avlTree.restore(originData);
      printf("Please insert file number\n");
      getline(cin, fileName);
      if (!readData(avlTree, originData, fileName, false))
        break;
      avlTree.printRoot(originData);
      
      break;
    case 3:
        printf(" I don't know how to do\n ");

		break;
    default:
      printf("Error, please input again\n");
    }
    
    cout << "*** Search Tree Utilities **" << endl;
    cout << "* 0. QUIT                  *" << endl;
    cout << "* 1. Build 2-3 tree        *" << endl;
    cout << "* 2. Build AVL tree        *" << endl;
    cout << "* 3. Intersection Query    *" << endl;
    cout << "*************************************" << endl;
    cout << "Input a choice(0, 1, 2, 3):" << endl;
    n = getInt();
  }
  return 0;
}
